//This is a example of a windows console app to add a step template to a project.

using System;
using System.Collections.Generic;
using Octopus.Client;
using Octopus.Client.Model;

namespace OctopusTestApp
{
    class Program
    {
        static void Main(string[] args)
        {   
            var octoUrl = "";
            var apiKey = ""; 
            var client = new OctopusClient(new OctopusServerEndpoint(octoUrl, apiKey));
            var repo = new OctopusRepository(client);
            
            //Project you want to create or modify
            var project = new ProjectResource
            {
                Name = "", //name of project
                ProjectGroupId = "", //group project should be added to.  to find by name: repo.ProjectGroups.FindByName("").Id) 
                LifecycleId = "" //lifecycle project should use. to find by name: repo.Lifecycles.FindByName("").Id
            };
            
            var newproject = repo.Projects.FindByName(project.Name);
            
            //Check if project exists, if not create it
            if (newproject== null)
                //Creates Project
                repo.Projects.Create(project);
                //get the new project
                newproject = repo.Projects.FindByName(project.Name);
            }
            if (newproject== null)
            {
                Console.WriteLine($"{project.Name} didn't exist, creating...");
                repo.Projects.Create(project);
                Console.WriteLine($"New Project {project.Name} Created!");
                newproject = repo.Projects.FindByName(project.Name);
            }
            Console.WriteLine($"New Project {project.Name} Found");
            
            //This will find the step template you want to add
            var chainStepTemplate = repo.ActionTemplates.FindByName("Step Template"); //Change this to the name of your step template to add
            Console.WriteLine("Template Found");
            
            //Get the deployment process for the project
            var deploymentProcess = repo.DeploymentProcesses.Get(newproject.DeploymentProcessId);
            
            //Initialize a new Deployment Step Resource
            var deploymentStep = new DeploymentStepResource
            {
                Name = "New Step", //Change this to what you want the step to be named.
                Condition = DeploymentStepCondition.Success,
                StartTrigger = DeploymentStepStartTrigger.StartAfterPrevious
            };
            
            //Initialize new Action
            var action = new DeploymentActionResource
            {
                Name = deploymentStep.Name,
                ActionType = chainStepTemplate.ActionType,

            };
            
            Console.WriteLine("Adding actions");
            //Add the template Id
            action.Properties.Add(new KeyValuePair<string, PropertyValueResource>("Octopus.Action.Template.Id", chainStepTemplate.Id));
            //Add the template Version
            action.Properties.Add(new KeyValuePair<string, PropertyValueResource>("Octopus.Action.Template.Version", chainStepTemplate.Version.ToString()));
            
            //Add the parameters for the step template and any default values.  Modify this to set other values.
            foreach (var parameter in chainStepTemplate.Parameters)
            {
                var property = new KeyValuePair<string, PropertyValueResource>(parameter.Name, parameter.DefaultValue);
                
                action.Properties.Add(property);
                Console.WriteLine($"{parameter.Name}");
            }
            
            //Add the standard properties
            foreach (var property in chainStepTemplate.Properties)
            {
                action.Properties.Add(property);
                Console.WriteLine($"{property.Key}");
            }
            
            //Add the action to your deployment step
            deploymentStep.Actions.Add(action);
            Console.WriteLine("Action added");
            //Add your step to the deployment process
            deploymentProcess.Steps.Add(deploymentStep);
            Console.WriteLine("Step added to Deployment Process");
            
            //Finally save the deployment process.
            try
            {
                repo.DeploymentProcesses.Modify(deploymentProcess);
                Console.WriteLine("Deployment Process was modified");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            Console.ReadLine();
        }
    }
}
